hackage:
  {
    packages = {
      "http-client" = hackage.http-client."0.5.13.1";
      "semigroupoids" = hackage.semigroupoids."5.3.1";
      "cookie" = hackage.cookie."0.4.4";
      "tf-random" = hackage.tf-random."0.5";
      "exceptions" = hackage.exceptions."0.10.0";
      "free" = hackage.free."5.1";
      "void" = hackage.void."0.7.2";
      "cereal" = hackage.cereal."0.5.7.0";
      "streaming-commons" = hackage.streaming-commons."0.2.1.0";
      "regex-tdfa-text" = hackage.regex-tdfa-text."1.0.0.3";
      "serialise" = hackage.serialise."0.2.0.0";
      "cryptohash-sha1" = hackage.cryptohash-sha1."0.11.100.1";
      "haskell-lexer" = hackage.haskell-lexer."1.0.1";
      "socks" = hackage.socks."0.5.6";
      "integer-logarithms" = hackage.integer-logarithms."1.0.2.2";
      "these" = hackage.these."0.7.5";
      "lens-family" = hackage.lens-family."1.2.2";
      "basement" = hackage.basement."0.0.8";
      "ansi-wl-pprint" = hackage.ansi-wl-pprint."0.6.8.2";
      "logict" = hackage.logict."0.6.0.2";
      "data-fix" = hackage.data-fix."0.2.0";
      "case-insensitive" = hackage.case-insensitive."1.2.0.11";
      "x509-validation" = hackage.x509-validation."1.6.10";
      "extra" = hackage.extra."1.6.11";
      "hourglass" = hackage.hourglass."0.2.12";
      "haskeline" = hackage.haskeline."0.7.4.3";
      "hashing" = hackage.hashing."0.1.0.1";
      "split" = hackage.split."0.2.3.3";
      "stm" = hackage.stm."2.4.5.1";
      "data-default-class" = hackage.data-default-class."0.1.2.0";
      "comonad" = hackage.comonad."5.0.4";
      "parser-combinators" = hackage.parser-combinators."1.0.0";
      "deriving-compat" = hackage.deriving-compat."0.5.2";
      "pointed" = hackage.pointed."5.0.1";
      "unordered-containers" = hackage.unordered-containers."0.2.9.0";
      "pem" = hackage.pem."0.2.4";
      "adjunctions" = hackage.adjunctions."4.4";
      "cryptohash-md5" = hackage.cryptohash-md5."0.11.100.1";
      "invariant" = hackage.invariant."0.5.1";
      "clock" = hackage.clock."0.7.2";
      "megaparsec" = hackage.megaparsec."6.5.0";
      "th-orphans" = hackage.th-orphans."0.13.6";
      "syb" = hackage.syb."0.7";
      "distributive" = hackage.distributive."0.6";
      "kan-extensions" = hackage.kan-extensions."5.2";
      "cborg" = hackage.cborg."0.2.0.0";
      "foundation" = hackage.foundation."0.0.21";
      "tls" = hackage.tls."1.4.1";
      "asn1-types" = hackage.asn1-types."0.3.2";
      "network" = hackage.network."2.8.0.0";
      "async" = hackage.async."2.2.1";
      "x509-store" = hackage.x509-store."1.6.6";
      "connection" = hackage.connection."0.2.8";
      "dlist" = hackage.dlist."0.8.0.5";
      "conduit" = hackage.conduit."1.3.0.3";
      "lens-family-th" = hackage.lens-family-th."0.5.0.2";
      "vector-instances" = hackage.vector-instances."3.4";
      "semigroups" = hackage.semigroups."0.18.5";
      "th-reify-many" = hackage.th-reify-many."0.1.8";
      "lens-family-core" = hackage.lens-family-core."1.2.2";
      "base-orphans" = hackage.base-orphans."0.8";
      "memory" = hackage.memory."0.14.16";
      "repline" = hackage.repline."0.1.7.0";
      "th-abstraction" = hackage.th-abstraction."0.2.8.0";
      "xml" = hackage.xml."1.3.14";
      "erf" = hackage.erf."2.0.0.0";
      "th-lift-instances" = hackage.th-lift-instances."0.1.11";
      "tagged" = hackage.tagged."0.8.6";
      "haskell-src-exts" = hackage.haskell-src-exts."1.20.2";
      "x509" = hackage.x509."1.7.4";
      "keys" = hackage.keys."3.12.1";
      "blaze-builder" = hackage.blaze-builder."0.4.1.0";
      "ansi-terminal" = hackage.ansi-terminal."0.8.1";
      "unliftio-core" = hackage.unliftio-core."0.1.2.0";
      "base-compat" = hackage.base-compat."0.10.4";
      "x509-system" = hackage.x509-system."1.6.6";
      "polyparse" = hackage.polyparse."1.12";
      "hnix" = hackage.hnix."0.5.2";
      "bifunctors" = hackage.bifunctors."5.5.3";
      "cryptohash-sha256" = hackage.cryptohash-sha256."0.11.101.0";
      "interpolate" = hackage.interpolate."0.2.0";
      "old-time" = hackage.old-time."1.1.0.3";
      "regex-tdfa" = hackage.regex-tdfa."1.2.3.1";
      "text-metrics" = hackage.text-metrics."0.3.0";
      "old-locale" = hackage.old-locale."1.0.0.7";
      "http-client-tls" = hackage.http-client-tls."0.3.5.3";
      "contravariant" = hackage.contravariant."1.5";
      "mime-types" = hackage.mime-types."0.1.0.8";
      "StateVar" = hackage.StateVar."1.1.1.1";
      "regex-base" = hackage.regex-base."0.93.2";
      "th-expand-syns" = hackage.th-expand-syns."0.4.4.0";
      "cryptonite" = hackage.cryptonite."0.25";
      "zlib" = hackage.zlib."0.6.2";
      "network-uri" = hackage.network-uri."2.6.1.0";
      "asn1-parse" = hackage.asn1-parse."0.9.4";
      "microlens-aeson" = hackage.microlens-aeson."2.3.0";
      "happy" = hackage.happy."1.19.9";
      "hashable" = hackage.hashable."1.2.7.0";
      "cpphs" = hackage.cpphs."1.20.8";
      "transformers-base" = hackage.transformers-base."0.4.5.2";
      "cryptohash-sha512" = hackage.cryptohash-sha512."0.11.100.1";
      "vector-algorithms" = hackage.vector-algorithms."0.8.0.0";
      "byteable" = hackage.byteable."0.1.1";
      "pretty-show" = hackage.pretty-show."1.8.2";
      "base16-bytestring" = hackage.base16-bytestring."0.1.1.6";
      "attoparsec" = hackage.attoparsec."0.13.2.2";
      "colour" = hackage.colour."2.3.4";
      "infer-license" = hackage.infer-license."0.2.0";
      "optparse-applicative" = hackage.optparse-applicative."0.14.2.0";
      "random" = hackage.random."1.1";
      "uuid-types" = hackage.uuid-types."1.0.3";
      "scientific" = hackage.scientific."0.3.6.2";
      "monadlist" = hackage.monadlist."0.0.2";
      "asn1-encoding" = hackage.asn1-encoding."0.9.5";
      "QuickCheck" = hackage.QuickCheck."2.12.4";
      "half" = hackage.half."0.3";
      "haskell-src-meta" = hackage.haskell-src-meta."0.8.0.3";
      "cabal-doctest" = hackage.cabal-doctest."1.0.6";
      "th-lift" = hackage.th-lift."0.7.11";
      "resourcet" = hackage.resourcet."1.2.1";
      "http-types" = hackage.http-types."0.12.1";
      "microlens" = hackage.microlens."0.4.9.1";
      "Glob" = hackage.Glob."0.9.2";
      "aeson" = hackage.aeson."1.4.0.0";
      "mono-traversable" = hackage.mono-traversable."1.0.9.0";
      "primitive" = hackage.primitive."0.6.4.0";
      "safe" = hackage.safe."0.3.17";
      "yaml" = hackage.yaml."0.10.2.0";
      "transformers-compat" = hackage.transformers-compat."0.6.2";
      "profunctors" = hackage.profunctors."5.3";
      "vector" = hackage.vector."0.12.0.1";
      "time-locale-compat" = hackage.time-locale-compat."0.1.1.5";
      "hpack" = hackage.hpack."0.31.0";
    };
    compiler = {
      version = "8.4.3";
      nix-name = "ghc843";
      packages = {
        "bytestring" = "0.10.8.2";
        "unix" = "2.7.2.2";
        "Cabal" = "2.2.0.1";
        "base" = "4.11.1.0";
        "time" = "1.8.0.2";
        "text" = "1.2.3.0";
        "filepath" = "1.4.2";
        "process" = "1.6.3.0";
        "parsec" = "3.1.13.0";
        "array" = "0.5.2.0";
        "integer-gmp" = "1.0.2.0";
        "containers" = "0.5.11.0";
        "binary" = "0.8.5.1";
        "ghc-prim" = "0.5.2.0";
        "mtl" = "2.2.2";
        "rts" = "1.0";
        "terminfo" = "0.4.1.1";
        "transformers" = "0.5.5.0";
        "deepseq" = "1.4.3.0";
        "ghc-boot-th" = "8.4.3";
        "pretty" = "1.1.3.6";
        "template-haskell" = "2.13.0.0";
        "directory" = "1.3.1.5";
      };
    };
    overlay = pkgs:
      self:
        super:
          with pkgs.haskell.lib;
          let
            dontCheck' = x:
              if builtins.hasAttr "override" x
                then dontCheck x
                else x;
          in {
            http-client = dontCheck' (super.http-client);
            semigroupoids = dontCheck' (super.semigroupoids);
            cookie = dontCheck' (super.cookie);
            tf-random = dontCheck' (super.tf-random);
            exceptions = dontCheck' (super.exceptions);
            free = dontCheck' (super.free);
            void = dontCheck' (super.void);
            cereal = dontCheck' (super.cereal);
            streaming-commons = dontCheck' (super.streaming-commons);
            regex-tdfa-text = dontCheck' (super.regex-tdfa-text);
            serialise = dontCheck' (super.serialise);
            cryptohash-sha1 = dontCheck' (super.cryptohash-sha1);
            haskell-lexer = dontCheck' (super.haskell-lexer);
            socks = dontCheck' (super.socks);
            integer-logarithms = dontCheck' (super.integer-logarithms);
            these = dontCheck' (super.these);
            lens-family = dontCheck' (super.lens-family);
            basement = dontCheck' (super.basement);
            ansi-wl-pprint = dontCheck' (super.ansi-wl-pprint);
            logict = dontCheck' (super.logict);
            data-fix = dontCheck' (super.data-fix);
            case-insensitive = dontCheck' (super.case-insensitive);
            x509-validation = dontCheck' (super.x509-validation);
            extra = dontCheck' (super.extra);
            hourglass = dontCheck' (super.hourglass);
            haskeline = dontCheck' (super.haskeline);
            hashing = dontCheck' (super.hashing);
            split = dontCheck' (super.split);
            stm = dontCheck' (super.stm);
            data-default-class = dontCheck' (super.data-default-class);
            comonad = dontCheck' (super.comonad);
            parser-combinators = dontCheck' (super.parser-combinators);
            deriving-compat = dontCheck' (super.deriving-compat);
            pointed = dontCheck' (super.pointed);
            unordered-containers = dontCheck' (super.unordered-containers);
            pem = dontCheck' (super.pem);
            adjunctions = dontCheck' (super.adjunctions);
            cryptohash-md5 = dontCheck' (super.cryptohash-md5);
            invariant = dontCheck' (super.invariant);
            clock = dontCheck' (super.clock);
            megaparsec = dontCheck' (super.megaparsec);
            th-orphans = dontCheck' (super.th-orphans);
            syb = dontCheck' (super.syb);
            distributive = dontCheck' (super.distributive);
            kan-extensions = dontCheck' (super.kan-extensions);
            cborg = dontCheck' (super.cborg);
            foundation = dontCheck' (super.foundation);
            tls = dontCheck' (super.tls);
            asn1-types = dontCheck' (super.asn1-types);
            network = dontCheck' (super.network);
            async = dontCheck' (super.async);
            x509-store = dontCheck' (super.x509-store);
            connection = dontCheck' (super.connection);
            dlist = dontCheck' (super.dlist);
            conduit = dontCheck' (super.conduit);
            lens-family-th = dontCheck' (super.lens-family-th);
            vector-instances = dontCheck' (super.vector-instances);
            semigroups = dontCheck' (super.semigroups);
            th-reify-many = dontCheck' (super.th-reify-many);
            lens-family-core = dontCheck' (super.lens-family-core);
            base-orphans = dontCheck' (super.base-orphans);
            memory = dontCheck' (super.memory);
            repline = dontCheck' (super.repline);
            th-abstraction = dontCheck' (super.th-abstraction);
            xml = dontCheck' (super.xml);
            erf = dontCheck' (super.erf);
            th-lift-instances = dontCheck' (super.th-lift-instances);
            tagged = dontCheck' (super.tagged);
            haskell-src-exts = dontCheck' (super.haskell-src-exts);
            x509 = dontCheck' (super.x509);
            keys = dontCheck' (super.keys);
            blaze-builder = dontCheck' (super.blaze-builder);
            ansi-terminal = dontCheck' (super.ansi-terminal);
            unliftio-core = dontCheck' (super.unliftio-core);
            base-compat = dontCheck' (super.base-compat);
            x509-system = dontCheck' (super.x509-system);
            polyparse = dontCheck' (super.polyparse);
            hnix = dontCheck' (super.hnix);
            bifunctors = dontCheck' (super.bifunctors);
            cryptohash-sha256 = dontCheck' (super.cryptohash-sha256);
            interpolate = dontCheck' (super.interpolate);
            old-time = dontCheck' (super.old-time);
            regex-tdfa = dontCheck' (super.regex-tdfa);
            text-metrics = dontCheck' (super.text-metrics);
            old-locale = dontCheck' (super.old-locale);
            http-client-tls = dontCheck' (super.http-client-tls);
            contravariant = dontCheck' (super.contravariant);
            mime-types = dontCheck' (super.mime-types);
            StateVar = dontCheck' (super.StateVar);
            regex-base = dontCheck' (super.regex-base);
            th-expand-syns = dontCheck' (super.th-expand-syns);
            cryptonite = dontCheck' (super.cryptonite);
            zlib = dontCheck' (super.zlib);
            network-uri = dontCheck' (super.network-uri);
            asn1-parse = dontCheck' (super.asn1-parse);
            microlens-aeson = dontCheck' (super.microlens-aeson);
            happy = dontCheck' (super.happy);
            hashable = dontCheck' (super.hashable);
            cpphs = dontCheck' (super.cpphs);
            transformers-base = dontCheck' (super.transformers-base);
            cryptohash-sha512 = dontCheck' (super.cryptohash-sha512);
            vector-algorithms = dontCheck' (super.vector-algorithms);
            byteable = dontCheck' (super.byteable);
            pretty-show = dontCheck' (super.pretty-show);
            base16-bytestring = dontCheck' (super.base16-bytestring);
            attoparsec = dontCheck' (super.attoparsec);
            colour = dontCheck' (super.colour);
            infer-license = dontCheck' (super.infer-license);
            optparse-applicative = dontCheck' (super.optparse-applicative);
            random = dontCheck' (super.random);
            uuid-types = dontCheck' (super.uuid-types);
            scientific = dontCheck' (super.scientific);
            monadlist = dontCheck' (super.monadlist);
            asn1-encoding = dontCheck' (super.asn1-encoding);
            QuickCheck = dontCheck' (super.QuickCheck);
            half = dontCheck' (super.half);
            haskell-src-meta = dontCheck' (super.haskell-src-meta);
            cabal-doctest = dontCheck' (super.cabal-doctest);
            th-lift = dontCheck' (super.th-lift);
            resourcet = dontCheck' (super.resourcet);
            http-types = dontCheck' (super.http-types);
            microlens = dontCheck' (super.microlens);
            Glob = dontCheck' (super.Glob);
            aeson = dontCheck' (super.aeson);
            mono-traversable = dontCheck' (super.mono-traversable);
            primitive = dontCheck' (super.primitive);
            safe = dontCheck' (super.safe);
            yaml = dontCheck' (super.yaml);
            transformers-compat = dontCheck' (super.transformers-compat);
            profunctors = dontCheck' (super.profunctors);
            vector = dontCheck' (super.vector);
            time-locale-compat = dontCheck' (super.time-locale-compat);
            hpack = dontCheck' (super.hpack);
          };
  }
